@startuml
actor Utilisateur
participant AuthController <<RestController>>
participant AuthService <<Service>>
participant UserMapper <<Mapper>>
participant passwordEncoder <<PasswordEncoder>>
note over passwordEncoder : Bean Spring Security
participant JwtService <<Component>>
participant GlobalExceptionHandler <<RestControllerAdvice>>
participant UserRepository <<JpaRepository>>
participant User <<Entity>>

Utilisateur -> AuthController : POST /register (RegisterRequest)
note over AuthController : Validation avec @Valid
alt DTO invalide
    AuthController -> GlobalExceptionHandler : Lève Exception (MethodArgumentNotValidException)
    GlobalExceptionHandler --> AuthController : Retourne HTTP 400 (Erreur Bad Request)
    AuthController --> Utilisateur : HTTP 400 (MessageResponse: "Validation échouée")
else DTO valide
    AuthController -> AuthService : registerNewUser(RegisterRequest)
    AuthService -> UserRepository : findByEmail(email)
    alt Email existe
        UserRepository --> AuthService : retourne true
        AuthService -> GlobalExceptionHandler : Lève Exception (UserAlreadyExists)
        GlobalExceptionHandler --> AuthController : Retourne HTTP 409 (Erreur Conflict)
        AuthController --> Utilisateur : HTTP 409 (MessageResponse: "Email déjà utilisé")
    else Email inexistant
        UserRepository --> AuthService : retourne false
        AuthService -> passwordEncoder : encode(password)
        passwordEncoder --> AuthService : retourne mot de passe encodé
        note over AuthService : Mise à jour entité User avec mot de passe encodé
        AuthService -> UserMapper : registerRequestToUser(request, encodedPassword)
        UserMapper --> AuthService : retourne instance de User
        note over User : Création entité User
        AuthService -> UserRepository : save(User)
        UserRepository --> AuthService : confirme sauvegarde
        AuthService --> AuthController : retourne confirmation de création
        note over AuthController : Génération du token après sauvegarde de l'utilisateur
        AuthController -> JwtService : generateToken(user.id,user.email)
        JwtService --> AuthController : retourne JWT Token
        AuthController --> Utilisateur : HTTP 201 (AuthSuccess avec JWT token)
    end
end
@enduml